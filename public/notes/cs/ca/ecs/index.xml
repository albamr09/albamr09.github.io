<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alba&#39;s Notes – The Elements of Computer Systems</title>
    <link>//localhost:1313/notes/cs/ca/ecs/</link>
    <description>Recent content in The Elements of Computer Systems on Alba&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	  <atom:link href="//localhost:1313/notes/cs/ca/ecs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Boolean Logic</title>
      <link>//localhost:1313/notes/cs/ca/ecs/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/notes/cs/ca/ecs/01/</guid>
      <description>
        
        
        &lt;h2&gt;Boolean Algebra&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;boolean-algebra&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#boolean-algebra&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Boolean algebra manipulates two-state binary values. On Figure 1.1 we present three commonly used Boolean functions, also known as Boolean operators. These functions are named &lt;strong&gt;And&lt;/strong&gt;, &lt;strong&gt;Or&lt;/strong&gt;, and &lt;strong&gt;Not&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/truth_table_and_or_not.png&#34; alt=&#34;Truth Table of gates And, Or and Not&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Figure 1.2 begs the question: What makes And, Or, and Not more interesting? A deeper answer is that various subsets of logical operators can be used for expressing any Boolean function, and {And, Or, Not} is one such subset. Also, any one of these three basic operators can be expressed using &lt;strong&gt;Nand&lt;/strong&gt; gates only.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/all_binary_boolan_functions.png&#34; alt=&#34;Binary Boolean Functions&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Every Boolean function can be defined using two alternative representations: &lt;strong&gt;truth tables&lt;/strong&gt; or &lt;strong&gt;boolean expressions&lt;/strong&gt;. Given a Boolean function of n variables represented by a Boolean expression, we can always construct from it the function’s truth table and vice-versa.&lt;/p&gt;
&lt;p&gt;Note that every Boolean function can be represented by many different yet equivalent Boolean expressions. So the ability to &lt;strong&gt;simplify a Boolean expression is the first step toward hardware optimization&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Logic Gates&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;logic-gates&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#logic-gates&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;gate&lt;/strong&gt; is a physical device that implements a simple Boolean function. Gates can be realized with any alternative technology permitting switching and conducting capabilities. Many hardware implementations of Boolean functions were created, including magnetic, optical, biological, hydraulic, pneumatic, quantum-based, and even domino-based mechanisms.&lt;/p&gt;
&lt;p&gt;Today, gates are typically implemented as transistors etched in silicon, packaged as &lt;strong&gt;chips&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This means computer scientists don&amp;rsquo;t have to worry about physical artifacts and can be content with the abstract notions of Boolean algebra and gate logic, trusting blissfully that someone else will realize them in hardware.&lt;/p&gt;
&lt;h3&gt;Primitive and Composite Gates&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;primitive-and-composite-gates&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#primitive-and-composite-gates&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Since all logic gates have the same input and output data types (0&amp;rsquo;s and 1&amp;rsquo;s), &lt;strong&gt;they can be combined, creating composite gates of arbitrary complexity&lt;/strong&gt;. The right side of figure 1.5 gives the gate&amp;rsquo;s internal architecture, or implementation, whereas the left side shows its interface.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/composible_gate.png&#34; alt=&#34;Composite Gate&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note that the interface of any given gate is unique, however it can be realized in many different ways. From an efficiency standpoint, the general rule is to try to use as few gates as possible.&lt;/p&gt;
&lt;p&gt;To sum up, the art of logic design can be described as follows: Given a gate abstraction (also referred to as specification, or interface), find an efficient way to implement it using other gates that were already implemented.&lt;/p&gt;
&lt;h2&gt;Hardware Construction&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;hardware-construction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#hardware-construction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Today, hardware designers design the chip architecture using a formalism called &lt;strong&gt;Hardware Description Language&lt;/strong&gt;, or HDL by writing an HDL program. While the tests are carried out using computer simulation.&lt;/p&gt;
&lt;p&gt;The hardware designer will typically be interested in a variety of parameters such as speed of
computation, energy consumption and the overall cost implied by the implementation. All these parameters can be simulated.&lt;/p&gt;
&lt;p&gt;After all tests and optimizations have been performed the final version of the HDL program can become the blueprint for the physical chip.&lt;/p&gt;
&lt;p&gt;Figure 1.7, shows brief introduction to HDL, using an Xor gate example.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/hdl_xor_example.png&#34; alt=&#34;XOR gated defined with HDL&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Specification&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;specification&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#specification&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Not&lt;/strong&gt;: this gate outputs the opposite value of its input&amp;rsquo;s value.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And&lt;/strong&gt;: Returns 1 when both its inputs are 1, and 0 otherwise&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Or&lt;/strong&gt;: Returns 1 when at least one of its inputs is 1, and 0 otherwise&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Xor&lt;/strong&gt;: Also known as exclusive or, this gate returns 1 when exactly one of its inputs is 1, and 0 otherwise&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nand&lt;/strong&gt;: realizes the following Boolean function:&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/nand_truth_table.png&#34; alt=&#34;Nand Truth Table&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multiplexer&lt;/strong&gt;: A multiplexer is a three-input gate (see figure 1.9). The multiplexer uses &lt;em&gt;sel&lt;/em&gt; to select and output the value of either $a$ or $b$.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/multiplexer.png&#34; alt=&#34;Multiplexer&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Demultiplexer&lt;/strong&gt;: takes a single input value and routes it to one of two possible outputs, according to a selector bit (see Figure 1.10).&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/demultiplexor.png&#34; alt=&#34;Demultiplexer&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Multi-Bit Versions of Basic Gates&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;multi-bit-versions-of-basic-gates&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#multi-bit-versions-of-basic-gates&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Computer hardware is often designed to process multi-bit values—for example 16-bit inputs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multi-bit Not&lt;/strong&gt;: An n-bit Not gate applies the Boolean operation Not to every one of the bits in its n-bit input.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multi-bit And&lt;/strong&gt;: An n-bit And gate applies the Boolean operation And to every respective pair in its two n-bit inputs&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multi-bit Or&lt;/strong&gt;: An n-bit Or gate applies the Boolean operation Or to every respective pair in its two n-bit inputs&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multi-bit multiplexer&lt;/strong&gt;: An n-bit multiplexer operates exactly the same as a basic multiplexer, except that its inputs and output are n-bits wide&lt;/p&gt;
&lt;h3&gt;Multi-Way Versions of Basic Gates&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;multi-way-versions-of-basic-gates&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#multi-way-versions-of-basic-gates&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;These are logic gates that can operate on more than two inputs, for example:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multi-way Or&lt;/strong&gt;: An m-way Or gate outputs 1 when at least one of its m input bits is 1, and 0 otherwise.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multi-way/Multi-bit multiplexer&lt;/strong&gt;: An $m$-way $n$-bit multiplexer selects one of its $m$ $n$-bit inputs, and outputs it to its $n$-bit output. The selection is specified by a set of $k$ selection bits, where $k = \log_2 m$. For example, a $4$-way multiplexer is shown on the following image:&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/4_way_multiplexer.png&#34; alt=&#34;4-way Multiplexer&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Boolean Arithmetic</title>
      <link>//localhost:1313/notes/cs/ca/ecs/02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/notes/cs/ca/ecs/02/</guid>
      <description>
        
        
        &lt;h2&gt;Binary Addition&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;binary-addition&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#binary-addition&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A pair of binary numbers can be added bitwise from right to left by adding the two rightmost bits (&lt;strong&gt;lest significant&lt;/strong&gt; bits or LSB). Next, we add the resulting carry bit to the sum of the next pair of bits. We continue until the two left &lt;strong&gt;most significan bits&lt;/strong&gt; (MSB) are added.&lt;/p&gt;
&lt;p&gt;If the most significant bitwise addition generates a carry of 1, we have what is known as &lt;strong&gt;overflow&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Signed Binary Numbers&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;signed-binary-numbers&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#signed-binary-numbers&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We use &lt;strong&gt;two&amp;rsquo;s complement&lt;/strong&gt; (also known as radix complement) for representing signed numbers in binary code. Given a word size of $n$ bits, the two&amp;rsquo;s complement for negative $x$ is given by the binary code of $2^n - x$.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/2s_complement.png&#34; alt=&#34;Twos Complement&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The two’s complement representation has the following attractive properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The system codes signed numbers, ranging from $-(2^{n-1})$ to $2^{n-1} - 1$&lt;/li&gt;
&lt;li&gt;The code of any nonnegative number begins with a $0$.&lt;/li&gt;
&lt;li&gt;The code of any negative number begins with a $1$.&lt;/li&gt;
&lt;li&gt;To obtain the binary code of $-x$ flip all the bits of x and add 1 to the result.&lt;/li&gt;
&lt;li&gt;Subtraction is handled as a special case of addition.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Adders&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;adders&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#adders&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Half Adders&lt;/strong&gt;: adds two bits, outputs two bits.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/half_adder.png&#34; alt=&#34;Half Adder&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Full adder&lt;/strong&gt;: adds three bits, outputs two bits.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/full_adder.png&#34; alt=&#34;Full Adder&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adder&lt;/strong&gt;: adds two $n$-bit numbers.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/adder.png&#34; alt=&#34;Adder&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Incrementer&lt;/strong&gt;: adds $1$ to a given number (&lt;em&gt;Spoiler: This will enable fetching the next instruction from memory, after executing the current one&lt;/em&gt;).&lt;/p&gt;
&lt;h2&gt;The Arithmetic Logic Unit&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;the-arithmetic-logic-unit&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-arithmetic-logic-unit&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;An &lt;strong&gt;Arithmetic Logic Unit&lt;/strong&gt; is a chip designed to compute a set of arithmetic and logic operations. Exactly which operations an ALU should feature is a design decision. This ALU design is unique to the computer built in Nand to Tetris, named Hack.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/ALU.png&#34; alt=&#34;ALU&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As seen in figure 2.5a, the Hack ALU operates on two $16$-bit two&amp;rsquo;s complement integers, denoted $x$ and $y$, and on six $1$-bit inputs, called &lt;strong&gt;control bits&lt;/strong&gt;. These control bits tell the ALU which function to compute. The exact specification is given in figure 2.5b.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/ALU_specification.png&#34; alt=&#34;ALU&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note that each one of the six control bits is associated with a standalone, conditional micro-action. The six directives are to be performed in order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We either set the $x$ and $y$ inputs to $0$, or not&lt;/li&gt;
&lt;li&gt;We either negate the resulting values, or not&lt;/li&gt;
&lt;li&gt;We compute either $+$ or $&amp;amp;$ on the preprocessed values&lt;/li&gt;
&lt;li&gt;We either negate the resulting value, or not.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All these settings, negations, additions, and conjunctions are $16$-bit operations.&lt;/p&gt;
&lt;p&gt;Note that the ALU actually computes a total of sixty-four functions, since six control bits code that many possibilities. We’ve decided to focus on, and document, only eighteen of these possibilities, since these will suffice for supporting the instruction set of our target computer system&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Memory</title>
      <link>//localhost:1313/notes/cs/ca/ecs/03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/notes/cs/ca/ecs/03/</guid>
      <description>
        
        
        &lt;h2&gt;Memory Devices&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;memory-devices&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#memory-devices&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;data flip flop&lt;/strong&gt; (DFF) is a time-dependent logic gate that can flip and flop between two stable states: representing $0$ and $1$. DFFs are used as low-level chip-parts embedded deep within other memory devices (see Figure 3.1.).&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/data_flip_flop.png&#34; alt=&#34;Data Flip Flop&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;DFFs can be used to create $1$-bit registers and $n$ such registers can be lashed together to create an $n$-bit register. Next, a &lt;strong&gt;RAM&lt;/strong&gt; device is constructed using an arbitrary number of such registers.&lt;/p&gt;
&lt;h2&gt;Sequential Logic&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;sequential-logic&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#sequential-logic&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;On any operation outputs are always delayed, due to at least two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The signal that represent the inputs travel from the outputs of other chips, which takes time.&lt;/li&gt;
&lt;li&gt;The computations that chips perform also take time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus, time is an issue we must deal with. As seen at the top of figure 3.2, time is viewed as an arrow that progresses relentlessly forward. This progression is taken to be &lt;strong&gt;continuous&lt;/strong&gt;: between
every two time-points there is another time-point, and changes in the world can be infinitesimally small.&lt;/p&gt;
&lt;p&gt;Instead of viewing time as a continuous progression, we break it into &lt;strong&gt;fixed-length intervals&lt;/strong&gt;, cycles. Where &lt;strong&gt;cycles are atomic and indivisible&lt;/strong&gt;: changes in the world occur only during cycle transitions; within cycles, the world stands still.&lt;/p&gt;
&lt;p&gt;This discrete view of time serves two design objectives:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It can be used for neutralizing the randomness associated with communications and computation time delays.&lt;/li&gt;
&lt;li&gt;Second, it can be used for synchronizing the operations of different chips across the system.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/discrete_time.png&#34; alt=&#34;Discrete Time Representation&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s focus on the bottom part of figure 3.2, which tracks how a Not gate (used as an example) responds to arbitrarily chosen inputs. When we feed the gate with $1$, it takes a while before the gate&amp;rsquo;s output stabilizes on $0$. However, since the cycle duration is—by design—longer than the time delay, when we reach the cycle&amp;rsquo;s end, the gate output has already stabilized on $0$.&lt;/p&gt;
&lt;p&gt;Therefore the cycle&amp;rsquo;s length must be longer than the maximal time delays that can occur in the system. In practice, we design our hardware such that the cycle is sufficiently long to contain any possible time delay taking into acount that, the shorter the cycle, the faster the computer. To sum up, the cycle length is chosen to be slightly longer than the maximal time delay in any chip in the system.&lt;/p&gt;
&lt;p&gt;Typically, the cycles are realized by an oscillator that alternates continuously between two phases labeled $0$−$1$, low-high, or ticktock. Using the hardware’s circuitry, the same &lt;strong&gt;master clock signal&lt;/strong&gt; is simultaneously broadcast to every memory chip in the system. In every such chip, the clock input is funneled to the lower-level DFF gates.&lt;/p&gt;
&lt;h3&gt;Flip-flops&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;flip-flops&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#flip-flops&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The low-level devices that facilitate the memory/storage abstraction are named &lt;strong&gt;flip-flop&lt;/strong&gt; gates, in our case, data flip-flop or DFF, whose interface includes a single-bit data input and a single-bit data output.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/data_flip_flop_specification.png&#34; alt=&#34;Data Flip-flop&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In addition, the DFF has a clock input that feeds from the master clock’s signal. Taken together, the data input and the clock input enable the DFF to implement the following behaviour $out(t) = in(t - 1)$&lt;/p&gt;
&lt;h3&gt;Combinational and Sequential Logic&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;combinational-and-sequential-logic&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#combinational-and-sequential-logic&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The most fundamental sequential gate is the DFF, and any chip that includes it is also said to be sequential.&lt;/p&gt;
&lt;p&gt;As shown in figure 3.4, these sequential chips may also interact with combinational chips. In combinational chips, the introduction of feedback loops is problematic, because the output would depend on itself. However, if the feedback loop goes through a DFF gate: the DFF introduces an inherent time delay so that the output at time $t$ does not depend on itself but rather on the output at time $t - 1$.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/feedback_loop.png&#34; alt=&#34;Combinational and Sequential Logic&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The time dependency of sequential chips has an important side effect that serves to synchronize the overall computer architecture.&lt;/p&gt;
&lt;p&gt;Suppose we instruct the ALU to compute $x + y$, because of physical constraints the electric signals representing $x$ and $y$ will likely arrive at the ALU at different times. It will take some time before the ALU’s output stabilizes to the correct result. Until then, the ALU will generate garbage.&lt;/p&gt;
&lt;h2&gt;Random Access Memory&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;random-access-memory&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#random-access-memory&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A direct-access memory unit, also called &lt;strong&gt;Random Access Memory&lt;/strong&gt;, or RAM, is an aggregate of $n$ Register chips (see figure 3.7).&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/ram.png&#34; alt=&#34;RAM&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Counter&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;counter&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#counter&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;strong&gt;Counter&lt;/strong&gt; is a chip that knows how to increment its value by 1 each time unit, aslo known as &lt;strong&gt;Program Counter&lt;/strong&gt; or PC (see figure 3.8).&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/counter.png&#34; alt=&#34;Counter&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Machine Language</title>
      <link>//localhost:1313/notes/cs/ca/ecs/04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/notes/cs/ca/ecs/04/</guid>
      <description>
        
        
        &lt;h2&gt;Overview&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;overview&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#overview&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;Hardware Elements&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;hardware-elements&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#hardware-elements&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A machine language can be viewed as an agreed-upon formalism designed to manipulate a &lt;strong&gt;memory&lt;/strong&gt; using a &lt;strong&gt;processor&lt;/strong&gt; and a set of &lt;strong&gt;registers&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: refers to the collection of hardware devices that store data and instructions. It is a continuous sequence of cells, also referred to as &lt;strong&gt;locations&lt;/strong&gt; or &lt;strong&gt;memory registers&lt;/strong&gt;, each having a &lt;strong&gt;unique address&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Processor&lt;/strong&gt;: The processor, &lt;strong&gt;Central Processing Unit&lt;/strong&gt;, or CPU, is a device capable of performing a fixed set of primitive operations: arithmetic, locical operation, memory access operations and control (branching) operations. It consists of an &lt;strong&gt;ALU&lt;/strong&gt;, a set of &lt;strong&gt;registers&lt;/strong&gt;, and gate logic that enables it to parse and execute binary instructions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Registers&lt;/strong&gt;: moving data from the memory to the processor is relatively slow. For this reason, processors are normally equipped with several onboard registers inside the processor&amp;rsquo;s chip that serves as high-speed local memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These registers fall into two categories: &lt;strong&gt;data registers&lt;/strong&gt;, which hold data values, and &lt;strong&gt;address registers&lt;/strong&gt;, which hold values that can be interpreted either as data values or as memory addresses.&lt;/p&gt;
&lt;h3&gt;Languages&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;languages&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#languages&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Machine language programs can be written in two ways: &lt;strong&gt;binary&lt;/strong&gt; and &lt;strong&gt;symbolic&lt;/strong&gt;. Symbolic machine languages are called &lt;strong&gt;assembly languages&lt;/strong&gt;, and the programs that translate them into binary code are called &lt;strong&gt;assemblers&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;syntax of an assembly language is tightly related to the low-level&lt;/em&gt; details of the target hardware: the available ALU operations, number and type of registers, memory size, and so on.&lt;/p&gt;
&lt;h3&gt;Instructions&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;instructions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#instructions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Arithmetic and logical operations&lt;/strong&gt;: Every machine language features instructions for performing basic arithmetic operations:&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/arithmetic_operation_example.png&#34; alt=&#34;Arithmetic Operations Example&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Memory access&lt;/strong&gt;: Every machine language features means for accessing and manipulating selected memory locations. This is typically done using an address register, $A$. For example, suppose we wish to set memory location $17$ to the value $1$. We can decide to do so using the two instructions &lt;code&gt;load A,17&lt;/code&gt; followed by &lt;code&gt;load M,1&lt;/code&gt;, where, by convention, $M$ stands for the memory register selected by $A$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flow control&lt;/strong&gt;: To facilitate branching actions, machine languages feature several variants of conditional and unconditional goto instructions, as well as label declaration statements that mark the goto destinations (see Figure 4.1).&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/control_flow.png&#34; alt=&#34;Control Flow Example&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Symbols&lt;/strong&gt;: code that uses symbolic references is much easier to write, debug and maintain. Also low-level code that mentions no physical addresses is said to be &lt;strong&gt;relocatable&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;The Hack Machine Language&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;the-hack-machine-language&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-hack-machine-language&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;Background&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;background&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#background&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Hack is a $16$-bit computer, meaning that the CPU and the memory units are designed to process, move, and store, chunks of $16$-bit values.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Memory&lt;/strong&gt;: the Hack platform uses two distinct memory units: a &lt;strong&gt;data memory&lt;/strong&gt; and an &lt;strong&gt;instruction memory&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/hack_memory.png&#34; alt=&#34;Hack Memory&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The data memory (which we also call &lt;strong&gt;RAM&lt;/strong&gt;) is a read/write device. So hack instructions can read data from, and write data to, selected RAM registers. The current data register is referred as $M$.&lt;/p&gt;
&lt;p&gt;The instruction memory (which we also call &lt;strong&gt;ROM&lt;/strong&gt;) is a read-only device, and programs are loaded into it. The current instruction register is referred as the &lt;strong&gt;current instruction&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Registers&lt;/strong&gt;: Hack instructions are designed to manipulate three $16$-bit registers: a data register, denoted &lt;code&gt;D&lt;/code&gt;, an address register, denoted &lt;code&gt;A&lt;/code&gt;, and a selected data memory register, denoted &lt;code&gt;M&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Addresing&lt;/strong&gt;: The Hack instruction &lt;code&gt;@xxx&lt;/code&gt; sets the &lt;code&gt;A &lt;/code&gt; register to the value &lt;code&gt;xxx&lt;/code&gt;. This has two side effects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It makes the RAM register whose address is &lt;code&gt;xxx&lt;/code&gt; the selected memory register&lt;/li&gt;
&lt;li&gt;It makes the value of the ROM register whose address is &lt;code&gt;xxx&lt;/code&gt; the selected instruction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which action to pursue is determined by the subsequent Hack instruction.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Branching&lt;/strong&gt;: For example jo jump to instruction number $29$ we would use these two instructions: &lt;code&gt;@29&lt;/code&gt;, &lt;code&gt;0;JMP&lt;/code&gt;. The first instruction selects the &lt;code&gt;ROM[29]&lt;/code&gt; register and the second one realizes an unconditional jump to execute said instruction. The Hack language also features &lt;strong&gt;conditional branching&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt;: The &lt;code&gt;xxx&lt;/code&gt; in the Hack instruction &lt;code&gt;@xxx&lt;/code&gt; can be either a constant or a symbol. The use of symbols endows Hack assembly programs with the ability to use variables. For example &lt;code&gt;let x = 17&lt;/code&gt; translates to:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;@17
D=A
@x&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;Which basically selects the RAM register whose address is the value that is bound to the symbol &lt;code&gt;x&lt;/code&gt;, and set this register to $17$. We assume that there is an agent who knows how to bind the symbols to addresses (the assembler).&lt;/p&gt;
&lt;p&gt;On the following figure the show an example of the tranlation of pseudocode to our assembly language:&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/example_assembly_language.png&#34; alt=&#34;Example Assembly Language&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;The Hack Language Specification&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;the-hack-language-specification&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-hack-language-specification&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The Hack machine language consists of two instructions, specified in figure 4.5.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/hack_instruction_set.png&#34; alt=&#34;Hack Instruction Set&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h4&gt;The A-instruction&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;the-a-instruction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-a-instruction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The A-instruction sets the A register to some $15$-bit value. The binary version consists of two fields: an operation code (&lt;em&gt;op-code&lt;/em&gt;), which is $0$, followed by fifteen bits that code a nonnegative binary number.&lt;/p&gt;
&lt;p&gt;The A-instruction is used for three different purposes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s the only way to enter a constant into the computer.&lt;/li&gt;
&lt;li&gt;Sets the stage for a subsequent C-instruction that manipulates a selected RAM register.&lt;/li&gt;
&lt;li&gt;Sets the stage for a subsequent C-instruction that specifies a jump.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;The C-instruction&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;the-c-instruction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-c-instruction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The C-instruction answers three questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What to compute (an ALU operation, denoted &lt;code&gt;comp&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Where to store the computed value (&lt;code&gt;dest&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;What to do next (&lt;code&gt;jump&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the binary version, the leftmost bit is the C-instruction’s &lt;code&gt;op-code&lt;/code&gt;, which is $1$. The next two bits are not used, and are set by convention to $1$.&lt;/p&gt;
&lt;h5&gt;Computation specification (&lt;code&gt;comp&lt;/code&gt;)&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;computation-specification-comp&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#computation-specification-comp&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;The computed function is specified by the &lt;code&gt;a-bit&lt;/code&gt; and the six &lt;code&gt;c-bits&lt;/code&gt; comprising the instruction&amp;rsquo;s &lt;code&gt;comp&lt;/code&gt; field. This $7$-bit pattern can potentially code $128$ different calculations, of which only the twenty-eight listed in figure 4.5.&lt;/p&gt;
&lt;p&gt;In the ALU the first input feeds from the &lt;code&gt;D&lt;/code&gt; register, while the second ALU input feeds either
from the &lt;code&gt;A&lt;/code&gt; register (when the &lt;code&gt;a-bit&lt;/code&gt; is $0$) or from &lt;code&gt;M&lt;/code&gt;, the selected data memory register (when the &lt;code&gt;a-bit&lt;/code&gt; is $1$).&lt;/p&gt;
&lt;h5&gt;Destination specification (&lt;code&gt;dest&lt;/code&gt;)&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;destination-specification-dest&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#destination-specification-dest&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;The ALU output can be stored in zero, one, two, or three possible destinations, simultaneously. The first and second &lt;code&gt;d-bits&lt;/code&gt; code whether to store the computed value in the &lt;code&gt;A&lt;/code&gt; register and in the &lt;code&gt;D&lt;/code&gt; register, respectively. The third &lt;code&gt;d-bit&lt;/code&gt; codes whether to store the computed value in &lt;code&gt;M&lt;/code&gt;, the currently selected memory register.&lt;/p&gt;
&lt;h5&gt;Jump directive (&lt;code&gt;jump&lt;/code&gt;)&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;jump-directive-jump&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#jump-directive-jump&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;The jump field of the C-instruction specifies what to do next. There are two possibilities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fetch and execute the next instruction in the program, the default.&lt;/li&gt;
&lt;li&gt;Fetch and execute some other instruction.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the latter case, we assume that the &lt;code&gt;A&lt;/code&gt; register was already set to the address of the target instruction.&lt;/p&gt;
&lt;p&gt;Whether or not to jump is determined jointly by the three &lt;code&gt;j-bits&lt;/code&gt;. This gives eight possible jump
conditions, listed on figure 4.5.&lt;/p&gt;
&lt;h3&gt;Symbols&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;symbols&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#symbols&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Assembly instructions can specify memory locations (addresses) using either constants or symbols.&lt;/p&gt;
&lt;h4&gt;Predefined symbols&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;predefined-symbols&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#predefined-symbols&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;R0, R1, …, R15&lt;/code&gt;: bound to the values $0$ to $15$.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SP, LCL, ARG, THIS, THAT&lt;/code&gt;: bound to the values $0$, $1$, $2$, $3$, and $4$, respectively&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SCREEN, KBD&lt;/code&gt;: bound, respectively, to the values $16384$ and $24576$. Which are the base addresses of the screen memory map and the keyboard memory map.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Layer symbols&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;layer-symbols&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#layer-symbols&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The syntax &lt;code&gt;(xxx)&lt;/code&gt; binds the symbol &lt;code&gt;xxx&lt;/code&gt; to the address of the next instruction in the program.&lt;/p&gt;
&lt;h4&gt;Variable symbols&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;variable-symbols&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#variable-symbols&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Any symbol &lt;code&gt;xxx&lt;/code&gt; appearing in a Hack assembly program that is not predefined and is not declared elsewhere using &lt;code&gt;(xxx)&lt;/code&gt; is treated as a variable and is bound to a unique running number starting at $16$.&lt;/p&gt;
&lt;h3&gt;Input/Output Handling&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;inputoutput-handling&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#inputoutput-handling&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The Hack hardware platform can be connected to two peripheral I/O devices: a &lt;strong&gt;screen&lt;/strong&gt; and a &lt;strong&gt;keyboard&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screen&lt;/strong&gt;: the computer interacts with a black-and-white screen organized as $256$ rows of $512$ pixels per row. So it is associated to a memory map stored in an $8$K memory block of $16$-bit words, starting at RAM address $16384$. Each row in the physical screen, starting at the screen&amp;rsquo;s top-left corner, is represented in the RAM by $32$ consecutive $16$-bit words.&lt;/p&gt;
&lt;p&gt;Note that we cannot access individual pixels/bits directly, we must fetch a complete $16$-bit word ($16$ pixels).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Keyboard&lt;/strong&gt;: the computer can interact with a standard physical keyboard via a single-word memory map located at RAM address $24576$. When a key is pressed on the physical keyboard, its $16$-bit character code appears at &lt;code&gt;RAM[KBD]&lt;/code&gt;. When no key is pressed, the code $0$ appears.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Computer Architecture</title>
      <link>//localhost:1313/notes/cs/ca/ecs/05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/notes/cs/ca/ecs/05/</guid>
      <description>
        
        
        &lt;h2&gt;Computer Architecture Fundamentals&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;computer-architecture-fundamentals&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#computer-architecture-fundamentals&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A computer is based on a fixed hardware platform capable of executing a fixed repertoire of simple instructions which serves as building blocks. Moreover the logic of these programs is temporarily stored in the computer&amp;rsquo;s memory, like data.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;von Neumann architecture&lt;/strong&gt;, shown in figure 5.1, is based on a Central Processing Unit (CPU), interacting with a memory device, receiving data from some input device, and emitting data to some output device.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/von_neumann.png&#34; alt=&#34;Von Neumann Architecture&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The term &lt;strong&gt;Random Access Memory&lt;/strong&gt; derives from the important requirement that each randomly selected memory register can be reached instantaneously, that is, within the same cycle.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data memory&lt;/strong&gt;: High-level programs are designed to manipulate abstract artifacts like variables, arrays, and objects. Yet at the hardware level, these data abstractions are realized by binary values stored in memory registers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intruction memory&lt;/strong&gt;: Before a high-level program can be executed on a target computer, it must first be translated into the machine language of the target computer. Each high-level statement is translated into one or more low-level instructions, which are then written as binary values to a file called the binary, or executable, version of the program. Before running a program, we must first load its binary version into the computer&amp;rsquo;s instruction memory.&lt;/p&gt;
&lt;h3&gt;Central Processing Unit&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;central-processing-unit&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#central-processing-unit&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The Central Processing Unit (CPU) is in charge of executing the instructions of the program using three main elements: An Arithmetic Logic Unit (ALU), a set of registers, and a control unit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Arithmetic Logic Unit&lt;/strong&gt;: performs all the low-level arithmetic and logical operations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Registers&lt;/strong&gt;: stores interim values temporarily. It the processor&amp;rsquo;s immediate memory. These registers serve various purposes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Data registers&lt;/em&gt; store interim values&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Address registers&lt;/em&gt; store values that are used to address the RAM&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Program Counter&lt;/em&gt; tores the address of the instruction that should be fetched and executed nex&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Instruction register&lt;/em&gt; stores the current instruction.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Control&lt;/strong&gt;: A computer instruction is a structured package of micro-codes: sequences of one or more bits designed to tell different devices what to do. Before an instruction can be executed, it
must first be decoded into its micro-codes. Next, each micro-code is routed to its designated hardware device (ALU, registers, memory).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fetch-Execute&lt;/strong&gt;: In each cycle of the program&amp;rsquo;s execution, the CPU fetches a binary machine instruction from the instruction memory, decodes it, and executes it. It also figures out which instruction to fetch and execute next. This is called the &lt;strong&gt;fetch-execute cycle&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Input and Output&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;input-and-output&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#input-and-output&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Computers interact with a great variety of input and output (I/O) devices. So we use a key element: memory-mapped I/O. This mapping is done by allocating, for each I/O device, a designated area in the computer&amp;rsquo;s memory that acts as its memory map. Then low-level computer programs can access any I/O device by manipulating its designated memory map.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/hack_memory_interface.png&#34; alt=&#34;Hack Memory Interface&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Given the multitude of computer platforms, I/O devices, and different hardware and software vendors &lt;strong&gt;standars&lt;/strong&gt; play a crucial role to realize these low-level interactions between the computer and the external devices.&lt;/p&gt;
&lt;p&gt;Another necessary element is a &lt;strong&gt;device driver program&lt;/strong&gt;, which is added to the computer&amp;rsquo;s operating system. This program controls the way this data is actually rendered on, or generated by, the physical I/O device using the memory map.&lt;/p&gt;
&lt;h2&gt;The Hack Hardware Platform: Specification&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;the-hack-hardware-platform-specification&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-hack-hardware-platform-specification&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The Hack CPU consists of the ALU built in project 2 and three registers named Data register (D), Address register (A), and Program Counter (PC).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;D&lt;/code&gt; register is used solely for storing data values&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;A&lt;/code&gt; register serves one of three different purposes:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Storing a data value&lt;/li&gt;
&lt;li&gt;Selecting an address on the instruction memory&lt;/li&gt;
&lt;li&gt;Selecting an address on the data memory&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Central Processing Unit&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;central-processing-unit-1&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#central-processing-unit-1&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The Hack CPU interface is shown in figure 5.2. The CPU expects to be connected to an instruction memory, from which it fetches instructions for execution, and to a data memory, from which it can read, and into which it can write, data values.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/hack_cpu.png&#34; alt=&#34;Hack CPU Interface&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If the instruction input is an A-instruction, the CPU loads the $16$-bit instruction value into the A register.&lt;/p&gt;
&lt;p&gt;If instruction is a C-instruction, then:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The CPU causes the ALU to perform the computation specified by the instruction&lt;/li&gt;
&lt;li&gt;The CPU causes this value to be stored in the any of the A,D, or M destination registers specified by the instruction.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If one of the destination registers is &lt;code&gt;M&lt;/code&gt;, the CPU&amp;rsquo;s &lt;code&gt;outM&lt;/code&gt; output is set to the ALU output, and the CPU&amp;rsquo;s &lt;code&gt;writeM&lt;/code&gt; output is set to $1$. Otherwise, &lt;code&gt;writeM&lt;/code&gt; is set to $0$.&lt;/p&gt;
&lt;p&gt;As long as the reset input is $0$, the CPU uses the ALU output and the jump bits of the current instruction to decide which instruction to fetch next. If reset is $1$, the CPU sets pc to $0$. This realizes the fetch step on the fetch-execute cycle.&lt;/p&gt;
&lt;p&gt;The following figure shows its implementation:&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/hack_cpu_chip.png&#34; alt=&#34;Hack CPU Chip&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Computer&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;computer&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#computer&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When the user sets the &lt;code&gt;reset&lt;/code&gt; bit to $1$ and then to $0$, the computer starts executing the currently loaded program. This is referred as &amp;ldquo;booting the computer.&amp;rdquo; (see Figure 5.7).&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/hack_computer_interface.png&#34; alt=&#34;Hack Computer Interface&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For example, when you boot up a PC or a cell phone, the device is set up to run a ROM-resident program. This program, in turn, loads the operating system’s kernel (also a program) into the RAM and starts executing it.&lt;/p&gt;
&lt;p&gt;The following figure shows the Computer implemetation:&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/hack_computer_chip.png&#34; alt=&#34;Hack Computer Chip&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Assembler</title>
      <link>//localhost:1313/notes/cs/ca/ecs/06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/notes/cs/ca/ecs/06/</guid>
      <description>
        
        
        &lt;h2&gt;The Hack Machine Language Specification&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;the-hack-machine-language-specification&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-hack-machine-language-specification&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We distinguish two programs:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Binary Hack program&lt;/strong&gt;: A binary Hack program is a sequence of text lines, each consisting of sixteen 0 and 1 characters. Contains the instruction data we load onto the CPU to execute.&lt;/p&gt;
&lt;p&gt;Assembly Hack program: An assembly Hack program is a sequence of text lines, each being one of thre:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assembly instruction&lt;/strong&gt;: A symbolic A-instruction or a symbolic C-instruction.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Label declaration&lt;/strong&gt;: A line of the form &lt;code&gt;(xxx)&lt;/code&gt;, where &lt;code&gt;xxx&lt;/code&gt; is a symbol.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comment&lt;/strong&gt;: A line beginning with two slashes (//) is considered a comment and is ignored.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See Figure 4.5 for the specification of the Hack instruction set:&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/hack_instruction_set.png&#34; alt=&#34;Hack Instruction Set&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Handling Instructions&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;handling-instructions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#handling-instructions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For each assembly instruction, the assembler&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Parses the instruction into its underlying fields.&lt;/li&gt;
&lt;li&gt;For each field, generates the corresponding bit-code, as specified in figure 4.5.&lt;/li&gt;
&lt;li&gt;If the instruction contains a symbolic reference, resolves the symbol into its numeric value.&lt;/li&gt;
&lt;li&gt;Assembles the resulting binary codes into a string of sixteen $0$ and $1$ characters.&lt;/li&gt;
&lt;li&gt;Writes the assembled string to the output file.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Handling Symbols&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;handling-symbols&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#handling-symbols&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A common solution is to develop a two-pass assembler.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The assembler creates a symbol table and initializes it with all the predefined symbols and their pre-allocated values.&lt;/li&gt;
&lt;li&gt;In the first pass, the assembler builds a symbol table, adds all the label symbols to the table, and generates no code&lt;/li&gt;
&lt;li&gt;In the second pass, the assembler handles the variable symbols and generates binary code, using the symbol table.&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Virtual Marchine I: Processing</title>
      <link>//localhost:1313/notes/cs/ca/ecs/07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/notes/cs/ca/ecs/07/</guid>
      <description>
        
        
        &lt;h2&gt;Stach Machine&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;stach-machine&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#stach-machine&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The centerpiece of the stack machine is the stack, which is a sequential storage space that grows and shrinks as needed. The push operation adds a value to the top of the stack, and pop operation removes the stack&amp;rsquo;s top value. Note that the push/pop logic results in a &lt;strong&gt;last-in-first-out&lt;/strong&gt; (LIFO) access logic.&lt;/p&gt;
&lt;h3&gt;Stack Arithmetic&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;stack-arithmetic&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#stack-arithmetic&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Consider the generic operation $x \text{op} y$, where the operator $\text{op}$ is applied to the operands $x$ and $y$. In a stack machine, this operation is carried out as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The operands $x$ and $y$ are popped off the top of the stack.&lt;/li&gt;
&lt;li&gt;The value of $x \text{op} y$ is computed.&lt;/li&gt;
&lt;li&gt;The computed value is pushed onto the top of the stack.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, consider the expression $d = (2 - x) + (y + 9)$ shown in figure 7.3a.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/stack_arithmetic_example.png&#34; alt=&#34;Stack Arithmetic Example&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Virtual Memory Segments&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;virtual-memory-segments&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#virtual-memory-segments&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;High-level languages feature symbolic variables like $x, y, sum, count$, these can be a classlevel static variable, an instance-level field of an object, or a method-level local or argument variable.&lt;/p&gt;
&lt;p&gt;In virtual machines there are no symbolic variables, instead, variables are represented as entries in &lt;strong&gt;virtual memory segments&lt;/strong&gt; like &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;local&lt;/code&gt;, and &lt;code&gt;argument&lt;/code&gt;. The compiler maps the first, second, third, &amp;hellip; &lt;code&gt;static&lt;/code&gt; variable found in program onto &lt;code&gt;static 0&lt;/code&gt;, &lt;code&gt;static 1&lt;/code&gt;, &lt;code&gt;static 2&lt;/code&gt;, and so on. The other variable kinds are mapped on the segments &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;local&lt;/code&gt;, and &lt;code&gt;argument&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Our VM model features eight memory segments, whose names and roles are listed in figure 7.4.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/virtual_memory_segments.png&#34; alt=&#34;Virtual Memory Segments&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;VM Specification, Part I&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;vm-specification-part-i&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#vm-specification-part-i&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A VM program is a sequence of VM commands that fall into four categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Push / pop commands&lt;/li&gt;
&lt;li&gt;Arithmetic-logical commands&lt;/li&gt;
&lt;li&gt;Branching commands&lt;/li&gt;
&lt;li&gt;Function commands&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Push / Pop Commands&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;push--pop-commands&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#push--pop-commands&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;
    &lt;img src=&#34;../assets/push_pop_specification.png&#34; alt=&#34;Push/Pop Specification&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Arithmetic-Logical Commands&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;arithmetic-logical-commands&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#arithmetic-logical-commands&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Arithmetic commands: &lt;code&gt;add, sub, neg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Comparison commands: &lt;code&gt;eq, gt, lt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Logical commands: &lt;code&gt;and, or, not&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The commands &lt;code&gt;add, sub, eq, gt, lt, and,&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; have two implicit operands. We mean that the operand is not part of the command syntax since the command is designed to always operate on the two top stack values, there is no need to specify them.&lt;/p&gt;
&lt;h2&gt;Implementation&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;implementation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#implementation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The VM abstraction has only one data type: a signed integer. This type is implemented on the Hack platform as a two’s complement $16$-bit value. The VM Boolean values true and false are represented as $-1$ and $0$, respectively.&lt;/p&gt;
&lt;p&gt;The host Hack RAM consists of $32$K $16$-bit words. VM implementations should use the top of this address space as follows:&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/ram_slots.png&#34; alt=&#34;RAM Slots&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Where some slots are already allocated:&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/ram_allocated_slots.png&#34; alt=&#34;RAM Allocated Slots&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note that deciding where to locate virtual memory segments in the host RAM is a delicate issue. How can we ensure that these open-ended memory segments will not overflow into each other and into other reserved RAM areas? We will deal with this on the next chapter.&lt;/p&gt;
&lt;p&gt;VM implementations manipulate these virtual segments symbolically, using the pointer names. For example, suppose we want to push the value of the &lt;code&gt;D&lt;/code&gt; register onto the stack. This operation can be implemented using the logic which can be expressed in Hack assembly&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;// Selects RAM[SP] so we obtain the base address of the top of the stack
@SP
// Sets A to be the value under M, RAM[SP] (address of the top of the stack),
// So now the selected register (M) will be RAM[RAM[SP]] -&amp;gt; value of the element on top
// of the stack
A=M
// Update M to equal D, RAM[RAM[SP]] = M
M=D
// Selects RAM[SP] as the selected memory register, M = RAM[SP]
@SP
// As we pushed a new element on the stack, we augment the pointer
M=M&amp;#43;1&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h3&gt;Memory Segments Mapping&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;memory-segments-mapping&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#memory-segments-mapping&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Local, argument, this, that&lt;/strong&gt;: the base addresses of these segments are stored in the registers &lt;code&gt;LCL&lt;/code&gt;, &lt;code&gt;ARG&lt;/code&gt;, &lt;code&gt;THIS&lt;/code&gt;, and &lt;code&gt;THAT&lt;/code&gt;, respectively. Therefore, any access to the i-th entry of a virtual segment (in the context of a VM &lt;code&gt;push/pop segmentName i&lt;/code&gt; command) should be translated into assembly code that accesses address in the RAM.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pointer&lt;/strong&gt;: the &lt;code&gt;pointer&lt;/code&gt; segment contains exactly two values and is mapped directly onto RAM locations $3$ and $4$. These RAM locations are also called, respectively, &lt;code&gt;THIS&lt;/code&gt; and &lt;code&gt;THAT&lt;/code&gt;. Any access to pointer $0$ should result in accessing the &lt;code&gt;THIS&lt;/code&gt; pointer, and any access to pointer $1$ should result in accessing the &lt;code&gt;THAT&lt;/code&gt; pointer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Temp&lt;/strong&gt;: This $8$-word segment is also fixed and mapped directly on RAM locations $5$–$12$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constant&lt;/strong&gt;: This virtual memory segment is truly virtual, as it does not occupy any physical RAM space. Instead, the VM implementation handles any access to constant $i$ by simply supplying the constant $i$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Static&lt;/strong&gt;: are mapped on addresses $16$ to $255$ of the host RAM. Each reference to static i in a VM program stored in file &lt;code&gt;Foo.vm&lt;/code&gt; can be translated to the assembly symbol &lt;code&gt;Foo.i&lt;/code&gt;. the Hack assembler will map these symbolic variables on the host RAM, starting at address $16$. We note in closing that since the stack begins at address $256$, the implementation limits the number of static variables in a Jack program to $255 - 16 + 1 = 240$.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Virtual Marchine II: Control</title>
      <link>//localhost:1313/notes/cs/ca/ecs/08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/notes/cs/ca/ecs/08/</guid>
      <description>
        
        
        &lt;h2&gt;High Level Magic&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;high-level-magic&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#high-level-magic&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Whenever one function calls a function, someone must take care of the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Save the return address, which is the address within the caller&amp;rsquo;s code to which execution must return after the callee completes its execution;&lt;/li&gt;
&lt;li&gt;Save the memory resources of the caller&lt;/li&gt;
&lt;li&gt;Allocate the memory resources required by the callee&lt;/li&gt;
&lt;li&gt;Make the arguments passed by the caller available to the callee&amp;rsquo;s code&lt;/li&gt;
&lt;li&gt;Start executing the callee&amp;rsquo;s code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When the callee terminates and returns a value, someone must take care of the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make the callee&amp;rsquo;s return value available to the caller&amp;rsquo;s code&lt;/li&gt;
&lt;li&gt;Recycle the memory resources used by the callee&lt;/li&gt;
&lt;li&gt;Reinstate the previously saved memory resources of the caller&lt;/li&gt;
&lt;li&gt;Retrieve the previously saved return address&lt;/li&gt;
&lt;li&gt;Resume executing the caller&amp;rsquo;s code, from the return address onward.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Branching&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;branching&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#branching&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The VM language supports two forms of branching:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unconditional branching&lt;/strong&gt; is effected using a &lt;code&gt;goto symbol&lt;/code&gt; command, which means: jump to execute the command just after the label symbol command in the code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conditional branching&lt;/strong&gt; is effected using the &lt;code&gt;if-goto symbol&lt;/code&gt; command, whose semantics is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pop the topmost value off the stack.&lt;/li&gt;
&lt;li&gt;If it&amp;rsquo;s not false, jump to execute the command just after the label symbol command.&lt;/li&gt;
&lt;li&gt;Otherwise, execute the next command in the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consider a function that receives two arguments, $x$ and $y$, and returns the product $xy$. This can be done by adding $x$ repetitively to a local variable, say $\text{sum}$, $y$ times, and then returning sum&amp;rsquo;s value (see Figure 8.1.)&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/vm_branching_example.png&#34; alt=&#34;VM Branching Example&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Notice how the Boolean condition &lt;code&gt;!(i &amp;lt; y)&lt;/code&gt; implemented as:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;push i
push y
lt
ng&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;Is pushed onto the stack just before the &lt;code&gt;if-goto WHILE_END&lt;/code&gt; command.&lt;/p&gt;
&lt;h2&gt;Functions&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;functions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#functions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The only difference between applying a primitive operation and invoking a function is the keyword call preceding the latter. Both require the caller to set the stage by pushing arguments onto the stack, both operations are expected to consume their arguments, and both operations are expected to push return values onto the stack&lt;/p&gt;
&lt;p&gt;Figure 8.2 shows a VM program that computes the function $\sqrt{x^2 + y^2}$.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/vm_function_example.png&#34; alt=&#34;VM Function Example&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The bottom part of figure 8.2 shows that during run-time, each function sees a private world, consisting of its own working stack and memory segments.&lt;/p&gt;
&lt;p&gt;We use the term &lt;strong&gt;calling chain&lt;/strong&gt; to refer, conceptually, to all the functions that are currently involved in the program&amp;rsquo;s execution. Each function in the calling chain waits for the function that it called to return. Thus, the only function that is truly active in the calling chain is the last one.&lt;/p&gt;
&lt;p&gt;Functions normally use &lt;code&gt;local&lt;/code&gt; and &lt;code&gt;argument&lt;/code&gt; variables. These variables are temporary: the memory segments that represent them must be allocated when the function starts executing and can be discarded when the function returns. This memory management task is complicated by the requirement that function calling is allowed to be &lt;strong&gt;arbitrarily nested, as well as recursive&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The property that makes this housekeeping task tractable is the linear nature of the call-and-return logic. Assume that the current function is &lt;code&gt;foo&lt;/code&gt;. Suppose that at some point &lt;code&gt;foo&lt;/code&gt; wants to call another function, &lt;code&gt;bar&lt;/code&gt;, for its effect. At this point we have to put &lt;code&gt;foo&lt;/code&gt;&amp;rsquo;s execution on hold until bar will terminate its execution. Now, putting &lt;code&gt;foo&lt;/code&gt;&amp;rsquo;s working stack on hold is not a problem: because the stack grows only in one direction, the working stack of bar will never override previously pushed values.&lt;/p&gt;
&lt;p&gt;But how can we save &lt;code&gt;foo&lt;/code&gt;&amp;rsquo;s memory segments? If we wish to put these segments on hold, we can push their pointers onto the stack and pop them later. We use the term &lt;strong&gt;frame&lt;/strong&gt; to refer, collectively, to the set of pointer values needed for saving and reinstating the function&amp;rsquo;s state.&lt;/p&gt;
&lt;p&gt;As shown in figure 8.3, when handling the call functionName command, the VM implementation pushes the caller’s frame onto the stack. At the end of this housekeeping, we are ready to jump to executing the callee&amp;rsquo;s code. We use the function’s name to create a unique symbolic label that marks where the function starts. Thus we can generate assembly code that effects a &lt;code&gt;goto functionName&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/vm_stack_example.png&#34; alt=&#34;VM Stack Example&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Returning from the callee to the caller when the former terminates can be done by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Saving the return address just before control is transferred to executing the caller.&lt;/li&gt;
&lt;li&gt;Retrieving the return address and jumping to it just after the callee returns.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But where shall we save the return address? We can have the VM translator plant a label right after the instruction &lt;code&gt;call foo&lt;/code&gt; and push this label onto the stack. When we later encounter a &lt;code&gt;return&lt;/code&gt; command in the VM code, we can pop the previously saved return address off the stack—let&amp;rsquo;s call it &lt;code&gt;returnAddress&lt;/code&gt;— and effect the operation &lt;code&gt;goto returnAddress &lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We now turn to give a step-by-step illustration of how the VM implementation supports the function call-andreturn action in Figure 8.4.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/vm_function_return_example.png&#34; alt=&#34;VM Function Return Example&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Each call operation is implemented by saving the frame of the caller on the stack and jumping to execute the callee.&lt;/p&gt;
&lt;p&gt;Each return operation is implemented by&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Using the most recently stored frame for getting the return address within the caller’s code and reinstating its memory segments.&lt;/li&gt;
&lt;li&gt;Copying the topmost stack value (the return value) onto the stack location associated with &lt;code&gt;argument 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Jumping to execute the caller&amp;rsquo;s code from the return address onward.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Figure 8.5. shows the steps taken when calling and returning from a function:&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/vm_function_call_return_steps.png&#34; alt=&#34;VM Function Call/Return Steps&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;VM Specification, Part II&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;vm-specification-part-ii&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#vm-specification-part-ii&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;Branching Commands&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;branching-commands&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#branching-commands&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;label LABEL&lt;/code&gt;: Labels the current location in the function’s code. Only labeled locations can be jumped to.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;goto LABEL&lt;/code&gt;: Effects an unconditional &lt;code&gt;goto&lt;/code&gt; operation, causing execution to continue from the location marked by the label.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if-goto LABEL&lt;/code&gt;: Effects a conditional goto operation. The stack&amp;rsquo;s topmost value is popped; if the value is not zero, execution continues from the location marked by the label; otherwise, execution continues from the next command in the program.&lt;/p&gt;
&lt;h3&gt;Function Commands&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;function-commands&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#function-commands&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;function functionName nVars&lt;/code&gt;: Marks the beginning of a function named &lt;code&gt;functionName&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;call functionName nArgs&lt;/code&gt;: Calls the named function.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;return&lt;/code&gt;: Transfers execution to the command just following the call command.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Compiler I: Syntax Analysis</title>
      <link>//localhost:1313/notes/cs/ca/ecs/10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/notes/cs/ca/ecs/10/</guid>
      <description>
        
        
        &lt;h2&gt;Background&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;background&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#background&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;compiler&lt;/strong&gt; is a program that translates programs from a source language into a target language. The translation process, known as compilation, is conceptually based on two distinct tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Syntax analysis: usually divided further into two substages
&lt;ul&gt;
&lt;li&gt;Tokenizing: grouping of input characters into language atoms called tokens.&lt;/li&gt;
&lt;li&gt;Parsing: grouping of tokens into structured statements that have a meaning.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Code generation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Figure 10.1 shows these steps:&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/compiler_steps.png&#34; alt=&#34;Compiler Steps&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Given grammar—the set of rules that define the syntax of a programming language, parsing a program means to determine the exact correspondence between the program&amp;rsquo;s text and the grammar&amp;rsquo;s rules. To do so, we must first transform the program&amp;rsquo;s text into a list of tokens.&lt;/p&gt;
&lt;h3&gt;Lexical Analysis&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;lexical-analysis&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#lexical-analysis&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The first step in analyzing the program&amp;rsquo;s syntax is grouping the characters into tokens, as defined by the language lexicon, while ignoring white space and comments. This task is called &lt;strong&gt;lexical analysis&lt;/strong&gt;, &lt;strong&gt;scanning&lt;/strong&gt;, or &lt;strong&gt;tokenizing&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Figure 10.2 presents the Jack language lexicon and illustrates the tokenization of a typical code segment.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/tokenization.png&#34; alt=&#34;Tokenization&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Gammars&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;gammars&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#gammars&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A grammar is written in a meta-language: a language describing a language. Terminals are tokens, nonterminals are names of other rules, and qualifiers are represented by the five symbols &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, and &lt;code&gt;)&lt;/code&gt;. See figure 10.3 for an example.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/grammar_example.png&#34; alt=&#34;Grammar Exmaple&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We see that the grammar of a programming language can be used to ascertain, without ambiguity, whether given inputs are accepted or rejected. As a side effect of this parsing act, the parser produces an exact correspondence between the given input, on the one hand, and the syntactic patterns admitted by the grammar rules, on the other. The correspondence can be represented by a data structure called a &lt;strong&gt;parse tree&lt;/strong&gt;, also called a &lt;strong&gt;derivation tree&lt;/strong&gt;, like the one shown in figure 10.4a.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/parse_tree_example.png&#34; alt=&#34;Parse Tree Example&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;How can we represent parse trees textually? See figure 10.4b for an example.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/parse_tree_xml_example.png&#34; alt=&#34;Parse Tree as XML Example&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Parser&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;parser&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#parser&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A &lt;strong&gt;parser&lt;/strong&gt; is an agent that operates according to a given grammar. The parser accepts as input a stream of tokens and attempts to produce as output the parse tree associated with the given input.&lt;/p&gt;
&lt;p&gt;There are several algorithms for constructing parse trees. The &lt;strong&gt;top-down approach&lt;/strong&gt;, also known as recursive descent parsing, attempts to parse the tokenized input recursively, using the nested structures admitted by the language grammar.&lt;/p&gt;
&lt;p&gt;Recursive parsing algorithms are simple and elegant. If the language is simple, a single token lookahead is all that it takes to know which parsing rule to invoke next. Grammars that have this lingual property are called LL (1). These grammars can be handled simply and elegantly by recursive descent algorithms, without backtracking.&lt;/p&gt;
&lt;p&gt;The term LL comes from the observation that the grammar parses the input from left to right, performing leftmost derivation of the input. The (1) parameter informs that looking ahead $1$ token.&lt;/p&gt;
&lt;h2&gt;Specification&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;specification&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#specification&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The complete Jack grammar is specified in figure 10.5.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/jack_grammar_specification.png&#34; alt=&#34;Jack Grammar Specification&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Compiler II: Code Generation</title>
      <link>//localhost:1313/notes/cs/ca/ecs/11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/notes/cs/ca/ecs/11/</guid>
      <description>
        
        
        &lt;h2&gt;Code Generation&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;code-generation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#code-generation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We have to figure out how to systematically translate expressions, statements, subroutines, and the handling of variables, objects, and arrays into sequences of stack-based VM commands that execute the desired semantics on the target virtual machine.&lt;/p&gt;
&lt;h3&gt;Handling Variables&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;handling-variables&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#handling-variables&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;One of the basic tasks of compilers is mapping the variables declared in the source high-level program onto the host RAM of the target platform. In Nand to Tetris there are no mapping complications: all the primitive types in Jack are 16-bit wide, and so are the addresses and words of the Hack RAM. Thus, every Jack variable, including pointer variables holding 16-bit address values, can be mapped on exactly one word in memory.&lt;/p&gt;
&lt;p&gt;The second challenge faced by compilers is that variables of different kinds have different life cycles. Class-level static variables are shared globally by all the subroutines in the class. Therefore, a single copy of each static variable should be kept alive during the complete duration of the program’s execution.&lt;/p&gt;
&lt;p&gt;The good news is that we&amp;rsquo;ve already handled all these difficulties. In our two-tier compiler architecture, memory allocation and deallocation are delegated to the VM level. All we have to do now is map Jack static variables on &lt;code&gt;static 0, static 1, static 2&lt;/code&gt;, &amp;hellip;; field variables on &lt;code&gt;this 0, this 1&lt;/code&gt;, &amp;hellip;; local variables on &lt;code&gt;local 0, local 1&lt;/code&gt;, &amp;hellip;; and argument variables on &lt;code&gt;argument 0, argument 1&lt;/code&gt;, &amp;hellip;.&lt;/p&gt;
&lt;p&gt;The variable properties can be managed conveniently using a &lt;strong&gt;symbol table&lt;/strong&gt;. When a static, field, local, or argument variable is declared in the source code, the compiler allocates it to the next available entry in the corresponding &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;local&lt;/code&gt;, or &lt;code&gt;argument&lt;/code&gt; VM segment. To enable separate namespaces, each identifier is implicitly associated with a scope. Jack compilers can realize the scope abstractions by managing two separate symbol tables as seen in figure 11.2.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/compiler_symbol_table_example.png&#34; alt=&#34;Compiler Symbol Table Example&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When the compiler fails to find the variable in the table associated with the current scope, it looks it up outward.&lt;/p&gt;
&lt;h3&gt;Compiling Expressions&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;compiling-expressions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#compiling-expressions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In Jack, expressions are written using infix notation. In contrast, our compilation&amp;rsquo;s target language is postfix. We need an algorithm that knows how to parse an infix expression and generate from it as output postfix code. Figure 11.4 presents one such algorithm.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/infix_to_postfix_conversion.png&#34; alt=&#34;Infix to Postfix Conversion&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Figure 11.5 gives the complete grammatical definition of Jack expressions, along with several examples of actual expressions consistent with this definition.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/hack_expression_specification.png&#34; alt=&#34;Hack Expression Specification&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Compiling Strings&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;compiling-strings&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#compiling-strings&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Each time a string constant comes up in a high-level statement or expression, the compiler generates code that calls the &lt;code&gt;String&lt;/code&gt; constructor. Next, the compiler initializes the new object with the string characters by generating a sequence of calls to the String method &lt;code&gt;appendChar&lt;/code&gt;, one for each character.&lt;/p&gt;
&lt;h3&gt;Compiling Statements&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;compiling-statements&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#compiling-statements&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The Jack programming language features five statements: &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, and &lt;code&gt;while&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Return&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;return&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#return&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;First, we call the &lt;code&gt;compileExpression&lt;/code&gt; routine, which generates VM code designed to evaluate and put the expression’s value on the stack. Next, we generate the VM command &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Let&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;let&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#let&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Since parsing is a left-to-right process, we begin by remembering the &lt;code&gt;varName&lt;/code&gt;. Next, we call &lt;code&gt;compileExpression&lt;/code&gt;, which puts the expression&amp;rsquo;s value on the top of the stack. Finally, we generate the VM command &lt;code&gt;pop varName&lt;/code&gt;, (where &lt;code&gt;varName&lt;/code&gt; is for example, &lt;code&gt;local 3&lt;/code&gt;, &lt;code&gt;static 1&lt;/code&gt;, and so on). With this we store the top value of the stack onto &lt;code&gt;varName&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Do&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;do&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#do&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Here we discuss the compilation of function calls of the form do &lt;code&gt;className.functionName (exp1, exp2, ..., expn)&lt;/code&gt;. The &lt;code&gt;do&lt;/code&gt; abstraction is designed to call a subroutine for its effect, ignoring the return value. To compile it we call &lt;code&gt;compileExpression&lt;/code&gt; and then get rid of the topmost stack element (the expression&amp;rsquo;s value) by generating a command like &lt;code&gt;pop temp 0&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;If/While&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;ifwhile&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#ifwhile&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;One of the challenges faced by compiler developers is expressing the semantics of high-level control flow statements using nothing more than goto primitives. Figure 11.6 shows how this gap can be bridged systematically.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/control_flow_compiler.png&#34; alt=&#34;Control Flow Compilation&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The compiler starts by calling compileExpression, which generates VM commands designed to compute and push the expression&amp;rsquo;s value onto the stack. The compiler then generates the VM command &lt;code&gt;not&lt;/code&gt;, designed to negate the expression&amp;rsquo;s value. Next, the compiler creates a label, say &lt;code&gt;L1&lt;/code&gt;, and uses it for generating the VM command &lt;code&gt;if-goto L1&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Handling Objects&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;handling-objects&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#handling-objects&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Each object is implemented physically as a memory block. The reference variable, also known as an &lt;strong&gt;object variable&lt;/strong&gt;, or &lt;strong&gt;pointer&lt;/strong&gt;, contains the memory block&amp;rsquo;s base address. The &lt;code&gt;heap&lt;/code&gt; is used as a memory pool from which memory blocks are carved, as needed, for representing new objects. When an object is no longer needed, its memory block can be freed.&lt;/p&gt;
&lt;p&gt;Any methodis designed to operate on a placeholder known as the &lt;strong&gt;current object&lt;/strong&gt;, or &lt;code&gt;this&lt;/code&gt;. When VM commands make references to &lt;code&gt;this 0&lt;/code&gt;, &lt;code&gt;this 1&lt;/code&gt;, &lt;code&gt;this 2&lt;/code&gt;, and so on, they should effect the fields of the current object. How do we align the &lt;code&gt;this&lt;/code&gt; segment with the current object?&lt;/p&gt;
&lt;p&gt;According to the VM specification, the pointer &lt;code&gt;THIS&lt;/code&gt; (referred to as &lt;code&gt;pointer 0&lt;/code&gt;) is designed to hold the base address of the memory segment this. Thus, to align the this segment with the current object, we can push its value (which is an address) onto the stack and then pop it into &lt;code&gt;pointer 0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Versions of this initialization technique are used conspicuously in the compilation of constructors and methods.&lt;/p&gt;
&lt;h4&gt;Compiling Constructors&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;compiling-constructors&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#compiling-constructors&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Compiling constructor calls&lt;/strong&gt;: First, one declares a variable of some class type. At a later stage, one can instantiate the object by calling a class constructor, for example, &lt;code&gt;let p = Point.new(2,3)&lt;/code&gt;. On this second step first, the constructor allocates a memory block of the required size. Second, when the constructorterminates its execution, it returns to the caller the base address of the allocated memory block. Figure 11.7 shows how this abstraction can be realized.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/object_construction_explanation.png&#34; alt=&#34;Object Construction Explanation&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The physical addresses $6012$ and $9543$ are irrelevant; the high-level code as well as the compiled VM code have no idea where the objects are stored in memory; the references to these objects are strictly symbolic, via &lt;code&gt;p1&lt;/code&gt; and &lt;code&gt;p2&lt;/code&gt; in the high-level code and &lt;code&gt;local 0&lt;/code&gt; and &lt;code&gt;local 1&lt;/code&gt; in the compiled code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Compiling constructors&lt;/strong&gt;: note that a constructor is a subroutine what makes the compilation of a constructor special is that in addition to treating it as a regular subroutine, the compiler must also generate code that (i) creates a new object and (ii) makes the new object the current object (also known as &lt;code&gt;this&lt;/code&gt;) (see Figure 11.8).&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/compiling_constructor.png&#34; alt=&#34;How to Compile a Constructor&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The creation of a new object requires finding a free RAM block sufficiently large to accommodate the new object’s data and marking the block as used. These tasks are delegated to the host operating system.&lt;/p&gt;
&lt;p&gt;Before calling &lt;code&gt;Memory.alloc&lt;/code&gt;, the compiler determines the size of the required memory block. This can be readily computed from the class-level symbol table. For example:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;pre&gt;&lt;code&gt;push constant 2
call Memory.alloc
pop pointer 0&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;This VM code allocates a total of two words of memory and saves the base address returned by &lt;code&gt;Memory.alloc&lt;/code&gt; on &lt;code&gt;this&lt;/code&gt; (or &lt;code&gt;pointer 0&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;According to the Jack language specification, every constructor must end with a &lt;code&gt;return this&lt;/code&gt; statement. This convention forces the compiler to end the constructor&amp;rsquo;s compiled version with &lt;code&gt;push pointer 0&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt; so the object&amp;rsquo;s base address is on top of the stack.&lt;/p&gt;
&lt;h4&gt;Compiling Methods&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;compiling-methods&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#compiling-methods&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;We&amp;rsquo;ll describe how to compile method calls and then how to compile the methods themselves.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Compiling method calls&lt;/strong&gt;: Unlike functions, methods are subroutines that always operate on a given object, and it&amp;rsquo;s the caller&amp;rsquo;s responsibility to specify this object. The compiler handles object-oriented method calls like &lt;code&gt;p1.distance (p2)&lt;/code&gt; as if they were procedural calls like &lt;code&gt;distance(p1, p2)&lt;/code&gt;. Specifically, it translates &lt;code&gt;p1.distance(p2)&lt;/code&gt; into &lt;code&gt;push p1&lt;/code&gt;, &lt;code&gt;push p2&lt;/code&gt;, &lt;code&gt;call distance&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To compile the method call &lt;code&gt;varName.methodName(exp1, exp2, ..., expn)&lt;/code&gt;, we start by generating the command &lt;code&gt;push varName&lt;/code&gt;. If the method call mentions no varName, we push the symbol table mapping of &lt;code&gt;this&lt;/code&gt;. Next, we call &lt;code&gt;compileExpressionList&lt;/code&gt;, that generates code for all the expressions defined for arguments. Finally, we generate the command &lt;code&gt;call className.methodName n+1&lt;/code&gt; informing that$n$ arguments were pushed onto the stack. See figure 11.9 for an example.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/compiling_method_call.png&#34; alt=&#34;Compiling a Method Call&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Compiling methods&lt;/strong&gt;: any is designed to operate on the current object, represented by the built-in identifier &lt;code&gt;this&lt;/code&gt;. One can write an entire method without ever mentioning &lt;code&gt;this&lt;/code&gt;. So how does the Jack compiler handle expressions like x – other.getx()? First, it looks up &lt;code&gt;x&lt;/code&gt; in the symbol tables and finds that it represents the first field in the current object. Which, according to the method call contract, it must be the first argument that was passed by the method&amp;rsquo;s caller. Therefore, from the callee’s perspective, the current object must be the object whose base address is the value of &lt;code&gt;argument 0&lt;/code&gt;. See figure 11.10 for the details.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/compiling_method.png&#34; alt=&#34;Compiling a Method&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Turning our attention to the compiled version, note that the code starts with &lt;code&gt;push argument 0&lt;/code&gt;,
followed by &lt;code&gt;pop pointer 0&lt;/code&gt;. These commands set the method&amp;rsquo;s &lt;code&gt;THIS&lt;/code&gt; pointer to the value of &lt;code&gt;argument 0&lt;/code&gt;, which contains the base address of the object on which the method was called to operate (&lt;code&gt;p1&lt;/code&gt;). Thus, from this point onward, the method’s this segment is properly aligned with the base address of the target object.&lt;/p&gt;
&lt;h3&gt;Compiling Arrays&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;compiling-arrays&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#compiling-arrays&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Arrays are similar to objects. In Jack, arrays are implemented as objects, concretely as instances of an Array class, which is part of the operating system. With the difference that the array abstraction allows accessing array elements using an index.&lt;/p&gt;
&lt;p&gt;Using pointer notation, observe that &lt;code&gt;arr[i]&lt;/code&gt; can be written as &lt;code&gt;*(arr + i)&lt;/code&gt; that is, memory address &lt;code&gt;arr + i&lt;/code&gt;. To compute the physical address of &lt;code&gt;arr[i]&lt;/code&gt;, we execute &lt;code&gt;push arr, push i, add&lt;/code&gt;, which results in pushing the target address onto the stack. Next, we execute &lt;code&gt;pop pointer 1&lt;/code&gt;. According to the VM specification, this action stores the target address in the method’s THAT pointer, which has the effect of aligning the base address of the virtual segment that with the target address. See figure 11.11 for the details.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/array_compilation.png&#34; alt=&#34;Array Compilation&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It doesn’t work for &lt;code&gt;a[i] = b[j]&lt;/code&gt;. The good news is that this flawed compilation strategy can be easily fixed to compile correctly any instance of &lt;code&gt;let arr[expression1] = expression2&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We generate the command &lt;code&gt;push arr&lt;/code&gt;, calling compileExpression, and generating the command &lt;code&gt;add&lt;/code&gt;. This sequence puts the target address &lt;code&gt;(arr + expression1)&lt;/code&gt; at the stack&amp;rsquo;s top.&lt;/li&gt;
&lt;li&gt;We call &lt;code&gt;compileExpression&lt;/code&gt;, which will end up putting at the stack&amp;rsquo;s top the value of &lt;code&gt;expression2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We save this value (&lt;code&gt;pop temp 0&lt;/code&gt;). This operation has the nice side effect of making &lt;code&gt;(arr + expression1)&lt;/code&gt; the top stack element.&lt;/li&gt;
&lt;li&gt;Thus we can now &lt;code&gt;pop pointer 1&lt;/code&gt; (set THAT to the value of &lt;code&gt;(arr + expression1)&lt;/code&gt;), &lt;code&gt;push temp 0&lt;/code&gt;(saves the value of &lt;code&gt;expression2&lt;/code&gt; on the stack), and &lt;code&gt;pop that 0&lt;/code&gt; (sets the value under address &lt;code&gt;(arr + expression1)&lt;/code&gt; to &lt;code&gt;expression2&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Operating System</title>
      <link>//localhost:1313/notes/cs/ca/ecs/12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/notes/cs/ca/ecs/12/</guid>
      <description>
        
        
        &lt;h2&gt;Mathematical Operations&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;mathematical-operations&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#mathematical-operations&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Normally, addition is implemented in hardware, at the ALU level, and subtraction is gained freely, using two&amp;rsquo;s complement method. Other arithmetic operations can be handled either by hardware or by software, depending on cost/performance considerations.&lt;/p&gt;
&lt;p&gt;As a rule, we seek algorithms whose running time is a polynomial function of the input&amp;rsquo;s word size $n$. Algorithms whose running time depends on the values of $n$-bit numbers are unacceptable, since these values are exponential in $n$.&lt;/p&gt;
&lt;h4&gt;Multiplication&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;multiplication&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#multiplication&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;On decimal notation, To compute $356$ times $73$, we line up the two numbers one on top of the other, right-justified. Next, we multiply $356$ by $3$. Next, we shift $356$ to the left one position, and multiply $3560$ by $7$. The binary version of the multiplication procedure is illustrated in figure 12.1.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/os_multiplication_algorithm.png&#34; alt=&#34;Multiplication Algorithm&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For each $i$-th bit of $y$, we shift $x$ $i$ times to the left (same as multiplying $x$ by $2^i$).&lt;/li&gt;
&lt;li&gt;We look at the $i$-th bit of $y$: If it is $1$, we add the shifted $x$ to an accumulator; otherwise, we do nothing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that $2 * shiftedx$ can be computed either by left-shifting the bitwise representation of $shiftedx$ or by adding $shiftedx$ to itself. Either operation lends itself to primitive hardware operations.&lt;/p&gt;
&lt;p&gt;The multiplication algorithm performs $n$ iterations, where $n$ is the bit width of the $y$ input. In the Hack platform, the bit width of all data types is $16$. If we assume that each iteration of the multiplication algorithm entails about ten Hack machine instructions, it follows that each multiplication operation will require at most $160$ clock cycles&lt;/p&gt;
&lt;h4&gt;Division&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;division&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#division&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;We can try to subtract large chunks of $y$&amp;rsquo;s from $x$ in each iteration. For example, suppose we have to divide $175$ by $3$. We start by asking: What is the largest number $x = (90, 80, \cdots, 10)$, so that $3 \cdot x \leq 175$. The answer is $50$. This accelerated subtraction leaves a remainder of $175 - 3 \cdot 50 = 25$. Moving along, we now ask: What is the largest number $x = (9, 8, \cdots, 1)$, so that $3 \cdot x \leq 25$? We perform this steps until the remainder is less than $3$. This technique is the rationale behind the dreaded school procedure known as long division.&lt;/p&gt;
&lt;p&gt;The binary version of this algorithm is identical, except that instead of accelerating the subtraction using powers of $10$ we use powers of $2$. Figure 12.2 presents another division algorithm which is as efficient, but more elegant and easier to implement.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/os_division_algorithm.png&#34; alt=&#34;Division Algorithm&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Suppose we have to divide $480$ by $17$. The algorithm shown in figure 12.2 is based on the insight and so on. The depth of this recursion is bounded by the number of times $y$ can be multiplied by $2$ before reaching $x$. This also happens to be, at most, the number of bits required to represent $x$.&lt;/p&gt;
&lt;h4&gt;Square Root&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;square-root&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#square-root&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The square root function has two attractive properties.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is monotonically increasing.&lt;/li&gt;
&lt;li&gt;Its inverse function, is a function that we already know how to compute efficiently, multiplication.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Taken together, these properties imply that we have all we need to compute square roots efficiently, using a form of binary search. Figure 12.3 gives the details.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/os_sqrt_algorithm.png&#34; alt=&#34;Sqrt Algorithm&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Since the number of iterations in the binary search that the algorithm performs is bound by $\frac{n}{2}$ where $n$ is the number of bits in $x$, the algorithm&amp;rsquo;s running time is $O(n)$.&lt;/p&gt;
&lt;h3&gt;Strings&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;strings&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#strings&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Typically, the string abstraction is supplied by a &lt;code&gt;String&lt;/code&gt; class that is part of the standard class library that supports the language.&lt;/p&gt;
&lt;p&gt;The more challenging &lt;code&gt;String&lt;/code&gt; methods are those that convert integer values to strings and strings of digit characters to integer values.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;String representation of numbers&lt;/strong&gt;: When numbers are captured from an input device like a keyboard they are cast as strings of characters, each representing one of the digits $0$ to $9$. The subset of relevant characters is:&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/number_string_representation.png&#34; alt=&#34;Number-String Representation&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The integer value of character $c$, where $48 \leq c \leq 57$ is $c - 48$. Conversely, the character code of the integer $x$, where $0 \leq x \leq 9$ is $x + 48$. These conversion algorithms can be based on either iterative or recursive logic, so figure 12.4 presents one of each.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/string_integer_conversion_algorithm.png&#34; alt=&#34;String-Integer Conversion&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Memory Management&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;memory-management&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#memory-management&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Each time a program creates a new array or a new object, a memory block of a certain size must be allocated for representing the new array or object. And when the array or object is no longer needed, its RAM space may be recycled. These chores are done by two classical OS functions called &lt;code&gt;alloc&lt;/code&gt; and &lt;code&gt;deAlloc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The memory blocks for representing arrays and objects are carved from, and recycled back into, a designated RAM area called a &lt;strong&gt;heap&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The agent responsible for managing this resource is the operating system. When the OS starts running, it initializes a pointer named &lt;code&gt;heapBase&lt;/code&gt;, containing the heap&amp;rsquo;s base address in the RAM (in Jack, the heap starts just after the
stack&amp;rsquo;s end, with &lt;code&gt;heapBase=2048&lt;/code&gt;). We’ll present two heap management algorithms: basic and improved.&lt;/p&gt;
&lt;h4&gt;Basic Memory Allocation Algorithm&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;basic-memory-allocation-algorithm&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#basic-memory-allocation-algorithm&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The data structure that this algorithm manages is a single pointer, named &lt;code&gt;free&lt;/code&gt;, which points to the beginning of the heap segment that was not yet allocated. See figure 12.5a for the details.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/basic_memory_management_algorithm.png&#34; alt=&#34;Basic Memory Management Algorithm&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The basic heap management scheme is clearly wasteful, as it never reclaims any memory space.&lt;/p&gt;
&lt;h4&gt;Improved Memory Allocation Algorithm&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;improved-memory-allocation-algorithm&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#improved-memory-allocation-algorithm&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This algorithm manages a linked list of available memory segments, called &lt;code&gt;freeList&lt;/code&gt; (see figure 12.5b). Each segment in the list begins with two housekeeping fields: the segment&amp;rsquo;s length and a pointer to the next segment in the list.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/improved_memory_management_algorithm.png&#34; alt=&#34;Improved Memory Management Algorithm&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When asked to allocate a memory block of a given size, the algorithm has to search the &lt;code&gt;freeList&lt;/code&gt; for a suitable segment. There are two heuristics for doing this search.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Best-fit: finds the shortest segment that is long enough for representing the required size&lt;/li&gt;
&lt;li&gt;First-fit: finds the first segment that is long enough&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next, the length of this segment is updated in the &lt;code&gt;freeList&lt;/code&gt;, reflecting the length of the part that remained after the allocation. If no memory was left in the segment, or if the remaining part is practically too small, the entire segment is eliminated from the &lt;code&gt;freeList&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When asked to reclaim the memory block of an unused object, the algorithm appends the deallocated block to the end of the &lt;code&gt;freeList&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Dynamic memory allocation algorithms like the one shown in figure 12.5b may create block fragmentation problems. Hence, a defragmentation operation should be considered, that is, merging memory areas that are physically adjacent in memory but logically split into different segments in the &lt;code&gt;freeList&lt;/code&gt;. The defragmentation can be done each time an object is deallocated, when &lt;code&gt;alloc()&lt;/code&gt; fails to find a block of the requested size, or according to some other, periodical ad hoc condition.&lt;/p&gt;
&lt;p&gt;We end the discussion of memory management with two simple OS functions that have nothing to do with resource allocation. &lt;code&gt;Memory.peek(addr)&lt;/code&gt; returns the value of the RAM at address &lt;code&gt;addr&lt;/code&gt;, and &lt;code&gt;Memory.poke(addr,value)&lt;/code&gt; sets the word in RAM address addr to value. These functions play a role in various OS services that manipulate the memory.&lt;/p&gt;
&lt;h3&gt;Graphical Output&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;graphical-output&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#graphical-output&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Modern computers render graphical output like animation and video on high-resolution color screens, using optimized graphics drivers and dedicated graphical processing units (GPUs). In Nand to Tetris we abstract away most of this complexity, focusing instead on fundamental graphicsdrawing algorithms and techniques.&lt;/p&gt;
&lt;p&gt;We assume that the computer is connected to a physical black-and-white screen arranged as a grid of rows and columns, and at the intersection of each lies a pixel. By convention, the columns are numbered from left to right and the rows are numbered from top to bottom. Thus pixel $(0,0)$ is located at the screen’s top-left corner.&lt;/p&gt;
&lt;p&gt;We assume that the screen is connected to the computer system through a memory map—a dedicated RAM area in which each pixel is represented by one bit. The screen is refreshed from this memory map many times per second by a process that is external to the computer.&lt;/p&gt;
&lt;p&gt;The most basic operation that can be performed on the screen is drawing an individual pixel specified by $(x,y)$ coordinates. This is done by turning the corresponding bit in the memory map on or off. Other operations like drawing a line and drawing a circle are built on top of this basic operation. The graphics package maintains a current color that can be set to black or white. All the drawing operations use the current color. Since the RAM is an $n$-bit device, this operation requires reading and writing an n-bit value. See figure 12.6.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/draw_pixel_algorithm.png&#34; alt=&#34;Algorithm to draw a pixel&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;On the next code section we show how a pixel is drawn on our OS:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;setPixelOnWord&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Avoid getting warning of integer constant too big&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;powersOfTwo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;drawBlack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// or operation over 000000001000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// where there is a 1 on the idx-th position&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// this ensures the idx-th bit is 1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// and operation over 111111101111111&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// where there is a 0 on the idx-th position&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// this ensures the idx-th bit is 0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*** Draws the (x,y) pixel, using the current color. **/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;drawPixel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screenAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screenValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wordIdx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screenAddress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;baseScreenMemory&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Computes the index on the 16-bit word by performing col % 16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wordIdx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screenValue&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;peek&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screenAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screenValue&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Screen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setPixelOnWord&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screenValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wordIdx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;poke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screenAddress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screenValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;When asked to render a continuous &amp;ldquo;line&amp;rdquo; between two &amp;ldquo;points&amp;rdquo; on a grid made of discrete pixels, the best that we can possibly do is approximate the line by drawing a series of pixels along the imaginary line connecting the two points. The procedure for drawing a line from $(x1,y1)$ to $(x2,y2)$ starts by drawing the $(x1,y1)$ pixel and then zigzagging in the direction of $(x2,y2)$ until that pixel is reached. See figure 12.7.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/draw_line_algorithm.png&#34; alt=&#34;Algorithm to draw a line&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The following code realizes this algorithm:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. **/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;drawLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;da&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xDirection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yDirection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;da&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Vertical line&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Screen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;drawVerticalLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Horizontal line&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Screen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;drawHorizontalLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// If y1 &amp;gt; y2 we have to always go up, that is we have to decrement y1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yDirection&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Else we have to always go down, that is we have to increment y1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yDirection&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// If x1 &amp;gt; x2 we have to always go left, that is we have to decrement x1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xDirection&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Else we have to always go right, that is we have to increment x1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xDirection&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;da&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;da&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Screen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;drawPixel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// (da, db) is, let&amp;#39;s say the current dx and dy. They store&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// how many times we have gone (up-down)/(right-left). da being the units to the&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// &amp;#34;right-left&amp;#34; and db being the units &amp;#34;up-down&amp;#34;.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;da&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// If the b/a ratio, that is the slope of our current line, m1, is below the&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// slope of the line to be painted (dx / dy), then we should readjust the&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// next pixel to draw so we augment m1. That means we need to modify the height b.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Go up/down&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yDirection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Else we need to decrement the slope m1 by modifying the x-coordinate of&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// the endpoint of our current line, that is a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Go right/left&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xDirection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;da&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;Figure 12.8 presents an algorithm that uses three routines that we&amp;rsquo;ve already implemented: multiplication, square root, and line drawing.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/draw_circle_algorithm.png&#34; alt=&#34;Algorithm to draw a circle&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The algorithm is based on drawing a sequence of horizontal lines (like the typical line $ab$ in the figure), one for each row in the range $y - r$ to $y + r$. Since $r$ is specified in pixels, the algorithm ends up drawing a line in every row along the circle&amp;rsquo;s north-south diameter, resulting in a completely filled circle. A simple tweak can cause this algorithm to draw only the circle&amp;rsquo;s outline, if so desired.&lt;/p&gt;
&lt;p&gt;And finally the next funcion shows how to implement the algorithm to draw the circle:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*** Draws a filled circle of radius r&amp;lt;=181 around (x,y), using the current color. **/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;drawCircle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rSquare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dySquare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ySum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yDiff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rSquare&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dySquare&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// y coordinate is computed using original y +- an offset of dy, which takes values in [0, r]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ySum&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yDiff&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// x coordinate is computed using pythagorean theorem, where the triangle&amp;#39;s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// hypothenuses length is equal to the radious (r) we also know the length of&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// one of the cathetus equals dy, therefore dx = +-sqrt(r^2 - dy^2)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rSquare&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dySquare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Avoid redrawing middle part of circle&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Draw upper part&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Screen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;drawLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yDiff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;yDiff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Draw lower part&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Screen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;drawLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ySum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ySum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;h3&gt;Character Output&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;character-output&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#character-output&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The character sets that computers use are divided into printable and non-printable subsets. For each printable character in the Hack character set, an 11-row-by-8-column bitmap image was designed. Taken together, these images are
called a font. To handle character spacing, each character image includes at least a $1$-pixel space before the next character in the row and at least a $1$-pixel space between adjacent rows (the exact spacing varies with the size and squiggles of individual characters). Figure 12.9 shows how our font renders the uppercase letter N.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/bitmap_font_example.png&#34; alt=&#34;Bitmap Font Example&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;On our OS the pixel representation for the characters are stored on a map, indexed by the int value assigned to each character:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;
  

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Initializes the character map array&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;initMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;charMaps&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Black square, used for displaying non-printable characters.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Assigns the bitmap for each character in the charachter set.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// The first parameter is the character index, the next 11 numbers&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// are the values of each row in the frame that represents this character.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;97&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;54&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;98&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// b&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;99&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;54&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// d&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;101&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// e&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;102&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;54&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// f&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;103&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;62&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// g&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;104&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// h&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Creates the character map array of the given character index, using the given values.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                     &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;charMaps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;

  
&lt;/div&gt;
&lt;p&gt;The resulting font is a collection of ninetyfive rectangular bitmap images, each representing a printable character. For each printable character, we define an array that holds the character&amp;rsquo;s bitmap. The array consists of 11 elements, each corresponding to a row of 8 pixels. Specifically, we set the value of each array entry j to an integer value whose binary representation (bits) codes the 8 pixels appearing in the j-th row of the character’s bitmap. So for example, the number $4$, whose binary representation in $8$ bits is $00000100$, would just color black the third column for the $j$th row.&lt;/p&gt;
&lt;p&gt;Characters are usually displayed one after the other, from left to right, until the end of the line is reached. The character-writing package maintains a global cursor that keeps track of the screen location where the next character should be drawn. The cursor information consists of column and row counts, say, &lt;code&gt;cursor.col&lt;/code&gt; and &lt;code&gt;cursor.row&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After a character has been displayed, we do &lt;code&gt;cursor.col++&lt;/code&gt;. At the end of the row we do &lt;code&gt;cursor.row++&lt;/code&gt; and &lt;code&gt;cursor.col = 0&lt;/code&gt;. When the bottom of the screen is reached, there is a question of what to do next. Two possible actions are effecting a scrolling operation or clearing the screen and starting over by setting the cursor to $(0,0)$.&lt;/p&gt;
&lt;h3&gt;Keyboard Input&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;keyboard-input&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#keyboard-input&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Detecting which key is presently pressed is a hardware-specific operation that depends on the keyboard interface. In the Hack computer, the keyboard continuously refreshes a $16$-bit memory register whose address is kept in a pointer named &lt;code&gt;KBD&lt;/code&gt;. If a key is currently pressed on the keyboard, that address contains the key’s character code; otherwise, it contains $0$. This contract is used for implementing the keyPressed function shown in figure 12.10.&lt;/p&gt;
&lt;p&gt;
    &lt;img src=&#34;../assets/key_pressed_algorithm.png&#34; alt=&#34;Key Pressed Algorithm&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The elapsed time between the key pressed and the subsequent key released events is unpredictable. Hence, we have to write code that neutralizes this uncertainty. Also, when users press keys on the keyboard, we want to give feedback as to which keys have been pressed. Typically, we want to display some graphical cursor at the screen location where the next input goes, and, after some key has been pressed, we want to echo the inputted character by displaying its bitmap on the screen at the cursor location. All these actions are implemented by the &lt;code&gt;readChar&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;A multicharacter input typed by the user is considered final after the ENTER key has been pressed, yielding the newLine character. Until the ENTER key is pressed, the user should be allowed to backspace, delete, and retype previously typed characters. All these actions are accommodated by the &lt;code&gt;readLine&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Our input-handling solutions are based on a cascading series of abstractions: The high-level program relies on the &lt;code&gt;readLine&lt;/code&gt; abstraction, which relies on the &lt;code&gt;readChar&lt;/code&gt; abstraction, which relies on the &lt;code&gt;keyPressed&lt;/code&gt; abstraction, which relies on the &lt;code&gt;Memory.peek&lt;/code&gt; abstraction, which relies on the hardware.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
